package repositorio;


/**
* repositorio/IRepositorioPOATie.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from C:/Dev/workspace352/OrgRepos/idl/IRepositorio.idl
* Wednesday, August 30, 2017 12:59:48 AM CEST
*/

public class IRepositorioPOATie extends IRepositorioPOA
{

  // Constructors

  public IRepositorioPOATie ( repositorio.IRepositorioOperations delegate ) {
      this._impl = delegate;
  }
  public IRepositorioPOATie ( repositorio.IRepositorioOperations delegate , org.omg.PortableServer.POA poa ) {
      this._impl = delegate;
      this._poa      = poa;
  }
  public repositorio.IRepositorioOperations _delegate() {
      return this._impl;
  }
  public void _delegate (repositorio.IRepositorioOperations delegate ) {
      this._impl = delegate;
  }
  public org.omg.PortableServer.POA _default_POA() {
      if(_poa != null) {
          return _poa;
      }
      else {
          return super._default_POA();
      }
  }

  ///////////////////////////////////
  public repositorio.IRepositorio padre ()
  {
    return _impl.padre();
  } // padre

  ///////////////////////////////////
  public void padre (repositorio.IRepositorio newPadre)
  {
    _impl.padre(newPadre);
  } // padre

  public repositorio.IRepositorio[] subordinados ()
  {
    return _impl.subordinados();
  } // subordinados

  public String nombre ()
  {
    return _impl.nombre();
  } // nombre
  public void nombre (String newNombre)
  {
    _impl.nombre(newNombre);
  } // nombre


  // Búsqueda por palabras clave
  public repositorio.Coincidencia[] buscar (String palabraClave)
  {
    return _impl.buscar(palabraClave);
  } // buscar


  // TODO Recuperar documentos
  public repositorio.ITransferencia iniciarDescarga (String nombre) throws repositorio.ArchivoNoEncontradoException
  {
    return _impl.iniciarDescarga(nombre);
  } // iniciarDescarga


  // Registrar repositorios subordinados
  public String registrar (repositorio.IRepositorio referencia)
  {
    return _impl.registrar(referencia);
  } // registrar

  public String registrarConNombre (repositorio.IRepositorio referencia, String nombre)
  {
    return _impl.registrarConNombre(referencia, nombre);
  } // registrarConNombre


  // Dar de baja un repositorio
  public void baja (String nombre)
  {
    _impl.baja(nombre);
  } // baja

  private repositorio.IRepositorioOperations _impl;
  private org.omg.PortableServer.POA _poa;

} // class IRepositorioPOATie
