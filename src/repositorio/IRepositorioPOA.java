package repositorio;


/**
* repositorio/IRepositorioPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from C:/Dev/workspace352/OrgRepos/idl/IRepositorio.idl
* Wednesday, August 30, 2017 4:08:42 PM CEST
*/

public abstract class IRepositorioPOA extends org.omg.PortableServer.Servant
 implements repositorio.IRepositorioOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("_get_padre", new java.lang.Integer (0));
    _methods.put ("_set_padre", new java.lang.Integer (1));
    _methods.put ("_get_subordinados", new java.lang.Integer (2));
    _methods.put ("_get_nombre", new java.lang.Integer (3));
    _methods.put ("_set_nombre", new java.lang.Integer (4));
    _methods.put ("buscar", new java.lang.Integer (5));
    _methods.put ("iniciarDescarga", new java.lang.Integer (6));
    _methods.put ("registrar", new java.lang.Integer (7));
    _methods.put ("registrarConNombre", new java.lang.Integer (8));
    _methods.put ("baja", new java.lang.Integer (9));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  ///////////////////////////////////
       case 0:  // repositorio/IRepositorio/_get_padre
       {
         repositorio.IRepositorio $result = null;
         $result = this.padre ();
         out = $rh.createReply();
         repositorio.IRepositorioHelper.write (out, $result);
         break;
       }


  ///////////////////////////////////
       case 1:  // repositorio/IRepositorio/_set_padre
       {
         repositorio.IRepositorio newPadre = repositorio.IRepositorioHelper.read (in);
         this.padre (newPadre);
         out = $rh.createReply();
         break;
       }

       case 2:  // repositorio/IRepositorio/_get_subordinados
       {
         repositorio.IRepositorio $result[] = null;
         $result = this.subordinados ();
         out = $rh.createReply();
         repositorio.IRepositorioSeqHelper.write (out, $result);
         break;
       }

       case 3:  // repositorio/IRepositorio/_get_nombre
       {
         String $result = null;
         $result = this.nombre ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       case 4:  // repositorio/IRepositorio/_set_nombre
       {
         String newNombre = in.read_string ();
         this.nombre (newNombre);
         out = $rh.createReply();
         break;
       }


  // Búsqueda por palabras clave
       case 5:  // repositorio/IRepositorio/buscar
       {
         String palabraClave = in.read_string ();
         repositorio.Coincidencia $result[] = null;
         $result = this.buscar (palabraClave);
         out = $rh.createReply();
         repositorio.ResultadosHelper.write (out, $result);
         break;
       }


  // TODO Recuperar documentos
       case 6:  // repositorio/IRepositorio/iniciarDescarga
       {
         try {
           String nombre = in.read_string ();
           repositorio.ITransferencia $result = null;
           $result = this.iniciarDescarga (nombre);
           out = $rh.createReply();
           repositorio.ITransferenciaHelper.write (out, $result);
         } catch (repositorio.ArchivoNoEncontradoException $ex) {
           out = $rh.createExceptionReply ();
           repositorio.ArchivoNoEncontradoExceptionHelper.write (out, $ex);
         }
         break;
       }


  // Registrar repositorios subordinados
       case 7:  // repositorio/IRepositorio/registrar
       {
         try {
           repositorio.IRepositorio referencia = repositorio.IRepositorioHelper.read (in);
           String $result = null;
           $result = this.registrar (referencia);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (repositorio.RegistroNoPosibleException $ex) {
           out = $rh.createExceptionReply ();
           repositorio.RegistroNoPosibleExceptionHelper.write (out, $ex);
         }
         break;
       }

       case 8:  // repositorio/IRepositorio/registrarConNombre
       {
         try {
           repositorio.IRepositorio referencia = repositorio.IRepositorioHelper.read (in);
           String nombre = in.read_string ();
           String $result = null;
           $result = this.registrarConNombre (referencia, nombre);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (repositorio.RegistroNoPosibleException $ex) {
           out = $rh.createExceptionReply ();
           repositorio.RegistroNoPosibleExceptionHelper.write (out, $ex);
         }
         break;
       }


  // Dar de baja un repositorio
       case 9:  // repositorio/IRepositorio/baja
       {
         String nombre = in.read_string ();
         this.baja (nombre);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:repositorio/IRepositorio:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public IRepositorio _this() 
  {
    return IRepositorioHelper.narrow(
    super._this_object());
  }

  public IRepositorio _this(org.omg.CORBA.ORB orb) 
  {
    return IRepositorioHelper.narrow(
    super._this_object(orb));
  }


} // class IRepositorioPOA
